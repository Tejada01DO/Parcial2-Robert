@page "/RegistroProductos"
@page "/RegistroProductos/{ProductoId:int}"
@inject HttpClient httpClient
@inject NotificationService notify

<EditForm Model="entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h1>Registro de Productos</h1>
        </div>
    </div>
</EditForm>>

@code
{
    [Parameter]
    public int ProductoId { get; set; }
    public Entradas entradas { get; set; } = new Entradas();
    public EntradasDetalle entradasDetalle { get; set; } = new EntradasDetalle();
    public int Total { get; set; } = 0;
    public int Cantidad { get; set; }

    public void Nuevo()
    {
        this.entradas = new Entradas();
    }

    public async Task Buscar()
    {
        var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradas.EntradaId}");

        if(entradaEncontrada != null)
        {
            this.entradas = entradaEncontrada;
            StateHasChanged();
            notify.ShowNotification(titulo: "Encontrado", mensaje: "La entrada se ha encontrado con exito", NotificationSeverity.Info);
        }
        else
        {
            notify.ShowNotification(titulo: "No encontrado", mensaje: "Esa entrada no existe", NotificationSeverity.Error);
        }
    }

    public bool Validar()
    {
        if(string.IsNullOrEmpty(entradas.Concepto))
        {
            return false;
        }
        if(entradas.PesoTotal < 0)
        {
            return false;
        }
        if(entradas.ProductoId < 0)
        {
            return false;
        }
        if(entradas.CantidadProducida < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public bool ValidarDetalle()
    {
        if(entradasDetalle.ProductoId < 0)
        {
            return false;
        }
        if(entradasDetalle.CantidadUtilizada < 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

    public async Task Guardar()
    {
        using var response = await httpClient.PostAsJsonAsync("api/Entrada", entradas);

        if(!response.IsSuccessStatusCode)
        {
            return;
        }
        
        var entradaDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();
        
        if(entradaDevuelta is not null)
        {
            this.entradas = entradaDevuelta;
            StateHasChanged();
            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        using var response = await httpClient.DeleteAsync($"api/Entrada/{entradas.EntradaId}");
        
        if(!response.IsSuccessStatusCode)
        {
            return;
        }
        else
        {
            Nuevo();
        }
    }
}